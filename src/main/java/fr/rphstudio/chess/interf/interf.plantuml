@startuml

title __INTERF's Class Diagram__\n

  namespace fr.rphstudio.chess.interf {
    class fr.rphstudio.chess.interf.ChessException {
        + ChessException()
        + ChessException()
        + ChessException()
        + ChessException()
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    class fr.rphstudio.chess.interf.EmptyCellException {
        + EmptyCellException()
        + EmptyCellException()
        + EmptyCellException()
        + EmptyCellException()
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    interface fr.rphstudio.chess.interf.IChess {
        {static} + BOARD_HEIGHT : int
        {static} + BOARD_POS_X_KING : int
        {static} + BOARD_POS_X_KINGSIDE_BISHOP : int
        {static} + BOARD_POS_X_KINGSIDE_KNIGHT : int
        {static} + BOARD_POS_X_KINGSIDE_ROOK : int
        {static} + BOARD_POS_X_QUEEN : int
        {static} + BOARD_POS_X_QUEENSIDE_BISHOP : int
        {static} + BOARD_POS_X_QUEENSIDE_KNIGHT : int
        {static} + BOARD_POS_X_QUEENSIDE_ROOK : int
        {static} + BOARD_POS_Y_BLACK_PAWNS : int
        {static} + BOARD_POS_Y_BLACK_PIECES : int
        {static} + BOARD_POS_Y_WHITE_PAWNS : int
        {static} + BOARD_POS_Y_WHITE_PIECES : int
        {static} + BOARD_WIDTH : int
        {abstract} + getKingState()
        {abstract} + getNbRemainingPieces()
        {abstract} + getPieceColor()
        {abstract} + getPieceMoves()
        {abstract} + getPieceType()
        {abstract} + getPlayerDuration()
        {abstract} + getRemovedPieces()
        {abstract} + movePiece()
        {abstract} + reinit()
        {abstract} + undoLastMove()
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    enum ChessColor {
      CLR_BLACK
      CLR_WHITE
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    enum ChessKingState {
      KING_SAFE
      KING_THREATEN
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    class fr.rphstudio.chess.interf.IChess.ChessPosition {
        + x : int
        + y : int
        + ChessPosition()
        + ChessPosition()
        + equals()
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    enum ChessType {
      TYP_BISHOP
      TYP_KING
      TYP_KNIGHT
      TYP_PAWN
      TYP_QUEEN
      TYP_ROOK
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    interface fr.rphstudio.chess.interf.IMove {
        {abstract} + getMove()
    }
  }
  

  namespace fr.rphstudio.chess.interf {
    class fr.rphstudio.chess.interf.OutOfBoardException {
        + OutOfBoardException()
        + OutOfBoardException()
        + OutOfBoardException()
        + OutOfBoardException()
    }
  }
  

  fr.rphstudio.chess.interf.EmptyCellException -up-|> fr.rphstudio.chess.interf.ChessException
  fr.rphstudio.chess.interf.IChess +-down- fr.rphstudio.chess.interf.IChess.ChessColor
  fr.rphstudio.chess.interf.IChess +-down- fr.rphstudio.chess.interf.IChess.ChessKingState
  fr.rphstudio.chess.interf.IChess +-down- fr.rphstudio.chess.interf.IChess.ChessPosition
  fr.rphstudio.chess.interf.IChess +-down- fr.rphstudio.chess.interf.IChess.ChessType
  fr.rphstudio.chess.interf.OutOfBoardException -up-|> fr.rphstudio.chess.interf.ChessException


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
