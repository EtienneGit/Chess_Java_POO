@startuml

title __GAME's Class Diagram__\n

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Board {
        ~ mapBlackPiece : HashMap<int[], ChessType>
        ~ mapWhitePiece : HashMap<int[], ChessType>
        - pieceList : Piece[][]
        - rowInitBlackPawn : int
        - rowInitWhitePawn : int
        + Board()
        + checkState()
        + getKingPos()
        + getNbRemainingPieces()
        + getPiece()
        + removeMovingPiece()
        + replacingPiece()
        - comparePosInList()
        - iterCreateMap()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.ChessModel {
        ~ lastMoves : ArrayList<OneMove>
        - blackRemovedPieces : ArrayList<RemovedPieces>
        {static} - single_instance : ChessModel
        - whiteRemovedPieces : ArrayList<RemovedPieces>
        + checkFurtherMove()
        {static} + getInstance()
        + getKingState()
        + getNbRemainingPieces()
        + getPieceColor()
        + getPieceMoves()
        + getPieceType()
        + getPlayerDuration()
        + getRemovedPieces()
        + movePiece()
        + reinit()
        + undoLastMove()
        - ChessModel()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.OneMove {
        {static} ~ index : int
        - hasEaten : boolean
        - indexItem : int
        - isPromoted : boolean
        - isRook : boolean
        + OneMove()
        + OneMove()
        + OneMove()
        + getIndexItem()
        + undoMove()
        - checkIfPawnWillPromote()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Piece {
        - nbrMoves : int
        + Piece()
        + getColor()
        + getNbrMoves()
        + getPieceMove()
        + getType()
        + incrementNbrMoves()
        + resetMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.RemovedPieces {
        - index : int
        + RemovedPieces()
        {static} + convertToList()
        + getIndex()
        + getType()
        {static} + seekAndDestroy()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.TimerSet {
        ~ test : long
        ~ timer : Timer
        + setTimer()
    }
  }
  

  fr.rphstudio.chess.game.ChessModel .up.|> fr.rphstudio.chess.interf.IChess
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.Board : chessBoard
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.TimerSet : timerB
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.TimerSet : timerW
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.interf.IChess.ChessPosition : newPos
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.interf.IChess.ChessPosition : oldRookPos
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.game.Piece : pieceEaten
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.interf.IChess.ChessPosition : pieceEatenPos
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.game.Piece : pieceMoved
  fr.rphstudio.chess.game.OneMove o-- fr.rphstudio.chess.interf.IChess.ChessPosition : pieceMovedPos
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IChess.ChessColor : chessColor
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IChess.ChessType : chessType
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IMove : pieceMove
  fr.rphstudio.chess.game.RemovedPieces o-- fr.rphstudio.chess.interf.IChess.ChessType : type


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
